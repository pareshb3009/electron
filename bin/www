#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejsstarter:server');
var http = require('http');
var ioconnection = require('../ioconnection');

const path = require('path')
const url = require('url')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
ioconnection.initialize(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log("Server start at : " + port);


// const electron = require('electron')
// const elecapp = electron.app
// const BrowserWindow = electron.BrowserWindow
// var mainWindow
// function createWindow () {
//   // Create the browser window.
//   mainWindow = new BrowserWindow(
//   {
//     icon: path.join(__dirname, 'assets/icons/png/64x64.png'),
//     webPreferences: {
//       nodeIntegration: false   
//     }
//   })
//   mainWindow.setFullScreen(true)
//   mainWindow.loadURL('http://localhost:3000/')
//   // mainWindow.loadURL(url.format({
//   //   pathname: path.join(appRoot, 'public/index.html'),
//   //   protocol: 'file:',
//   //   slashes: true
//   // }))

//   mainWindow.on('closed', function () {
//     mainWindow = null
//     elecapp.quit()
//   })
// }
// elecapp.on('ready', createWindow)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

